xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
server <- function(input, output) {
# group_state <- reactive({
#   midwest %>%
#   filter(group_state$state == input$checkbox) %>%
#   group_by(state) %>%
#   summarize(
#     "popwhite" = sum(popwhite),
#     "popblack" = sum(popblack),
#     "popasian" = sum(popasian),
#     "popother" = sum(popother),
#     "poptotal" = sum(poptotal)
#   )
# })
output$bar <- renderPlotly({
midwest %>%
filter(group_state$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
plot <- plot_ly(
data = group_state(),
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
server <- function(input, output) {
# group_state <- reactive({
#   midwest %>%
#   filter(group_state$state == input$checkbox) %>%
#   group_by(state) %>%
#   summarize(
#     "popwhite" = sum(popwhite),
#     "popblack" = sum(popblack),
#     "popasian" = sum(popasian),
#     "popother" = sum(popother),
#     "poptotal" = sum(poptotal)
#   )
# })
output$bar <- renderPlotly({
group_state <- midwest %>%
filter(group_state$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
plot <- plot_ly(
data = group_state(),
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
server <- function(input, output) {
# group_state <- reactive({
#   midwest %>%
#   filter(group_state$state == input$checkbox) %>%
#   group_by(state) %>%
#   summarize(
#     "popwhite" = sum(popwhite),
#     "popblack" = sum(popblack),
#     "popasian" = sum(popasian),
#     "popother" = sum(popother),
#     "poptotal" = sum(poptotal)
#   )
# })
output$bar <- renderPlotly({
group_state <- midwest %>%
filter(group_state$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
plot <- plot_ly(
data = group_state,
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
server <- function(input, output) {
# group_state <- reactive({
#   midwest %>%
#   filter(group_state$state == input$checkbox) %>%
#   group_by(state) %>%
#   summarize(
#     "popwhite" = sum(popwhite),
#     "popblack" = sum(popblack),
#     "popasian" = sum(popasian),
#     "popother" = sum(popother),
#     "poptotal" = sum(poptotal)
#   )
# })
output$bar <- renderPlotly({
group_state <- midwest %>%
filter(midwest$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
plot <- plot_ly(
data = group_state,
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
server <- function(input, output) {
# group_state <- reactive({
#   midwest %>%
#   filter(group_state$state == input$checkbox) %>%
#   group_by(state) %>%
#   summarize(
#     "popwhite" = sum(popwhite),
#     "popblack" = sum(popblack),
#     "popasian" = sum(popasian),
#     "popother" = sum(popother),
#     "poptotal" = sum(poptotal)
#   )
# })
output$bar <- renderPlotly({
group_state <- midwest %>%
filter(midwest$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
print(input$checkbox)
print(group_state)
plot <- plot_ly(
data = group_state,
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
runApp('C:/Users/MSI-NB/Desktop/INFO201/a6-Zijieq')
group_state <- midwest %>%
filter(midwest$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
print(input$checkbox)
print(group_state)
plot <- plot_ly(
data = group_state,
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
output$bar <- renderPlotly({
group_state <- midwest %>%
filter(midwest$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
print(input$checkbox)
print(group_state)
plot <- plot_ly(
data = group_state,
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
server <- function(input, output) {
# group_state <- reactive({
#   midwest %>%
#   filter(group_state$state == input$checkbox) %>%
#   group_by(state) %>%
#   summarize(
#     "popwhite" = sum(popwhite),
#     "popblack" = sum(popblack),
#     "popasian" = sum(popasian),
#     "popother" = sum(popother),
#     "poptotal" = sum(poptotal)
#   )
# })
output$bar <- renderPlotly({
group_state <- midwest %>%
filter(midwest$state == input$checkbox) %>%
group_by(state) %>%
summarize(
"popwhite" = sum(popwhite),
"popblack" = sum(popblack),
"popasian" = sum(popasian),
"popother" = sum(popother),
"poptotal" = sum(poptotal)
)
print(input$checkbox)
print(group_state)
plot <- plot_ly(
data = group_state,
x = ~state,
y = ~get(input$population),
type = "bar"
) %>%
layout(
title = "Population in different States",
xaxis = list(title = "State"),
yaxis = list(title = "Population")
)
})
# output$map <- renderPlotly({
#   plot <- switch(input$var,
#                  "Population density" = midwest$popdensity,
#                  "Percent of whites" = midwest$percwhite,
#                  "Percent of Black" = midwest$percblack)
#
#   color <- switch(input$var,
#                   "Percent White" = "darkgreen",
#                   "Percent Black" = "black",
#                   "Population density" = "darkorange")
#
#   legend <- switch(input$var,
#                    "Percent White" = "% White",
#                    "Percent Black" = "% Black",
#                    "Population density" = "% darkorange")
#
#   percent_map(plot, color, legend, input$range[1], input$range[2])
# })
}
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
shiny::runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
runApp()
runApp()
data("data/lat_long.csv")
data("lat_long.csv")
data(data/lat_long.csv)
data(data/lat_long)
data(lat_long)
View(lat_long)
data(collision)
data(Collision)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
server <- function(input, output){
output$traffic_map <- renderPlotly({
relative_data <- traffic_collision %>%
filter(INJURIES >= input$slide[1]
& INJURIES <= input$slide[2])
draw_map(relative_data)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
