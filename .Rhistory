# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive ==
"2-Wheel Drive" & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy ==
min(two_wheel_20_mpg$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year ==
year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
make_year_filter("Honda", 1995)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
unexpected_time <- mutate(flights, gain_in_air = arr_delay - dep_delay)
View(unexpected_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
unexpected_time <- arrange(flights, desc(gain_in_air))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
unexpected_time <- mutate(flights, gain_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
unexpected_time <- arrange(flights, desc(gain_in_air))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
unexpected_time <- arrange(unexpected_time, desc(gain_in_air))
View(unexpected_time)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
unexpected_time <- flights %>%
mutate(gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(unexpected_time$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(unexpected_time$gain_in_air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_tac <- flights %>%
select(origin, dest, gain_in_air) %>%
filter(dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_tac <- unexpected_time %>%
select(origin, dest, gain_in_air) %>%
filter(dest == "SEA")
# On average, did flights to SeaTac gain or loose time?
mean(sea_tac$gain_in_air, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(
avg_time = mean(air_time, na.rm = TRUE),
max_time = max(air_time, na.rm = TRUE),
min_time = min(air_time, na.rm = TRUE)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# Which city was flown to with the highest average speed?
highest_speed_city <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
airport_largest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
airport_largest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
airport_smallest_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
airport_largest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
airport_smallest_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
View(airport_largest_delay)
View(airport_smallest_delay)
airport_largest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
carrier_smallest_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
source('~/Desktop/a4-qinyuj-1932697/assignment.R')
traffic_data <- read.csv("data/Collision.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/AB-3-Group-Project")
traffic_data <- read.csv("data/Collisions.csv", stringsAsFactors = FALSE)
View(traffic_data)
View(traffic_data)
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR == substring(INCDATE, 0 , 3))
library("dplyr")
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR == substring(INCDATE, 0 , 3))
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR = substring(INCDATE, 0 , 3))
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR = substring(INCDATE, 0 , 3)) %>%
filter(INCYEAR == "2017")
View(traffic_data_2017)
View(traffic_data)
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR = substring(INCDATE, 0 , 3))
View(traffic_data_2017)
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR = substring(INCDATE, 0 , 4)) %>%
filter(INCYEAR == "2017")
View(traffic_data_2017)
View(traffic_data_2017)
View(traffic_data_2017)
View(traffic_data)
aggregate_address_type <- traffic_data_2017 %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
View(aggregate_address_type)
View(traffic_data_2017)
plot <- ggplot(data = aggregate_address_type,
aes(x = factor(1), fill = factor(ADDRTYPE))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
library("ggplot2")
plot <- ggplot(data = aggregate_address_type,
aes(x = factor(1), fill = factor(ADDRTYPE))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
plot
plot <- ggplot(data = appearance,
aes(x = factor(1), fill = factor(ADDRTYPE))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
plot <- ggplot(data = appearance,
aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
plot <- ggplot(data = aggregate_address_type,
aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=per, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("appearance", start = 0) +
theme_void()
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=per, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
geom_text(aes(x=1, y=appearance, label=label))
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
geom_text(aes(x=1, y=appearance))
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
geom_text(aes(x=1, y=appearance, label = label))
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
geom_text(aes(x = 1, y = appearance, label = appearance))
plot
plot <- ggplot(data = aggregate_address_type) +
geom_bar(aes(x="", y=appearance, fill = ADDRTYPE), stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
geom_text(aes(x = 1, y = cumsum(appearance) - appearance / 2, label = appearance))
plot
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
library("plotly")
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of addresstype in collisions",
x-axis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
y-axis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of addresstype in collisions")
plot
draw_pie_chart <- function(dataframe, col1, col2) {
plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot <- plot %>%
layout(title = paste("The percent distribution of" +
col1 + "in" + dataframe))
plot
}
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
View(aggregate_address_type)
View(aggregate_address_type)
traffic_data <- read.csv("data/Collision.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/AB-3-Group-Project")
traffic_data <- read.csv("data/Collision.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/AB-3-Group-Project")
traffic_data <- read.csv("data/Collision.csv", stringsAsFactors = FALSE)
traffic_data <- read.csv("data/Collision.csv", stringsAsFactors = FALSE)
traffic_data <- read.csv("data/Collision.csv", stringsAsFactors = FALSE)
traffic_data <- read.csv("data/Collisions.csv", stringsAsFactors = FALSE)
traffic_data_2017 <- traffic_data %>%
mutate(INCYEAR = substring(INCDATE, 0 , 4)) %>%
filter(INCYEAR == "2017")
aggregate_address_type <- traffic_data_2017 %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
draw_pie_chart <- function(dataframe, col1, col2) {
plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot <- plot %>%
layout(title = paste("The percent distribution of" +
col1 + "in" + dataframe))
plot
}
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
draw_pie_chart <- function(dataframe, col1, col2) {
plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
}
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
draw_pie_chart <- function(dataframe, col1, col2) {
plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
}
draw_pie_chart(aggregate_address_type, "ADDRTYPE", "appearance")
draw_pie_chart <- function(dataframe, col1, col2) {
plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type, "ADDRTYPE", "appearance")
draw_pie_chart <- function(dataframe) {
plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type)
draw_pie_chart <- function(dataframe) {
plot <- plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type)
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
draw_pie_chart <- function(dataframe, col1, col2) {
plot <- plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
draw_pie_chart <- function(dataframe, col1, col2) {
plot <- plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type, "ADDRTYPE", "appearance")
draw_pie_chart <- function(dataframe, col1, col2) {
plot <- plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type)
draw_pie_chart <- function(dataframe, col1, col2) {
plot <- plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot
}
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
draw_pie_chart <- function(dataframe, col1, col2) {
plot <- plot_ly(dataframe, labels = ~col1, values = ~col2,
type = "pie")
plot <- plot %>%
layout(title = paste("The percent distribution of" +
col1 + "in" + dataframe))
plot
}
draw_pie_chart(aggregate_address_type, ADDRTYPE, appearance)
draw_pie_chart <- function(dataframe) {
plot <- plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = paste("The percent distribution of" +
col1 + "in" + dataframe))
plot
}
draw_pie_chart(aggregate_address_type)
draw_pie_chart <- function(dataframe) {
plot <- plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of address type in collisions")
plot
}
draw_pie_chart(aggregate_address_type)
lat_long <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE)
lat_long <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE)
lat_long <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE)
file <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE)
file <- read.csv("lat_long.csv", stringsAsFactors = FALSE)
file <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE)
file <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- traffic_collision %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of address type in collisions")
plot
}
draw_pie_chart(aggregate_address_type)
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- traffic_collision %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of address type in collisions")
plot
}
draw_pie_chart(aggregate_address_type)
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(dataframe, labels = ~ADDRTYPE, values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of address type in collisions")
plot
}
draw_pie_chart(traffic_collision)
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of address type in collisions")
plot
}
draw_pie_chart(traffic_collision)
View(traffic_collision)
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(title = "The percent distribution of address type in collisions 2017")
plot
}
install.packages("ggmap")
install.packages("ggalt")
