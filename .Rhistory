hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is a boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise, it should be FALSE
more_minutes_than_hours <- minutes_in_a_day < hours_in_a_year
### Working with Functions ####################################################
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
#       Try reading a few pages to understand how to use each
make_introduction <- function(name, age) {
new_string <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(new_string)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function from stringr, create a variable `occurrences`
# that stores the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value multiplied by 2
double <- function(value) {
return(value * 2)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
return(number ^ 3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
install.packages("gplots")
library("ggplots2")
library("ggplot2")
install.packages(ggplot2)
install.packages("ggplot2")
midwest
library("ggplot2")
midwest
geom_hex(mapping = aes(x = percollege, y = peradultpoverty))
ggplot(data = midwest) + geom_hex(mapping = aes(x = percollege, y = peradultpoverty))
ggplot(data = midwest) + geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
install.packages(hexbin)
install.packages("hexbin")
ggplot(data = midwest) + geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
install.packages("plotly")
install.packages("leaflet")
library("dplyr")
library("ggplot2")
library("plotly")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
}
install.packages(c("ggalt", "ggmap"))
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
# drawing a map with following function
draw_map <- function(dataframe) {
map <- leaflet(dataframe) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10)) %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions(),
popup = ~paste(sep = "<br/>",
"Location: ", LOCATION,
" Injured: ", INJURIES)
)
return(map)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(
title = "The percent distribution of address type in collisions 2017"
)
plot
}
setwd("~/Documents/INFO 201/AB-3-Group-Project")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
setwd("~/Documents/INFO 201/AB-3-Group-Project/scripts")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
# drawing a map with following function
draw_map <- function(dataframe) {
map <- leaflet(dataframe) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10)) %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions(),
popup = ~paste(sep = "<br/>",
"Location: ", LOCATION,
" Injured: ", INJURIES)
)
return(map)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(
title = "The percent distribution of address type in collisions 2017"
)
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
draw_bar_plot <- function(dataframe) {
group_by(WEATHER) %>%
summarize(
n = n()
)
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
setwd("~/Documents/INFO 201/AB-3-Group-Project/scripts")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
return(fig)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collision) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
return(fig)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collision) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
return(fig)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collisions) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collisions) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
fig
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = n())) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = COLLISIONTYPE)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER))
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
select(WEATHER) %>%
filter(!is.na(""))
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
select(WEATHER, SEVERITYDESC) %>%
filter(!is.na(""))
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Number of Collisions", y = "Weather Type",
title = "Number of Collisions ") +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Number of Collisions",
title = "Number of Collisions vs. Weather Type ") +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
setwd("~/Documents/INFO 201/AB-3-Group-Project")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Number of Collisions",
title = "Number of Collisions vs. Weather Type ") +
coord_flip()
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
# drawing a map with following function
draw_map <- function(dataframe) {
map <- leaflet(dataframe) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10)) %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions(),
popup = ~paste(sep = "<br/>",
"Location: ", LOCATION,
" Injured: ", INJURIES)
)
return(map)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(
title = "The percent distribution of address type in collisions 2017"
)
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Number of Collisions",
title = "Number of Collisions vs. Weather Type ") +
coord_flip()
return(plot)
}
