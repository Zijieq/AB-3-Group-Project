# are represented by the data set
nrow(distinct(vehicles, make))
typeof(makes)
typeof(make)
typeof(vehicles$make)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997 <- arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average == (hwy + cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average === (hwy + cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
filtered_class <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- pull(filtered, id)
filtered_class <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- pull(filtered_class, id)
worst_hwy
filtered_class <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- select(filtered_class, id)
worst_hwy
filtered_class <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- pull(filtered_class, id)
choose_year_model <- function(year_choice, make_choice) {
filtered <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered, hwy == max(hwy))
return(pull(filtered, model))
}
# What was the most efficient Honda model of 1995?
choose_year_model(1995, "Honda")
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
acura_2015 <- filter(vehicles, make == "Acura", year == 2015)
best_acura <- filter(acura_2015, hwy == max(hwy))
model <- pull(best_acura, model)
model
model <- pull(filter(filter(vehicles,
make == "Acura",
year == 2015
),
hwy == max(hwy)
),
model
)
model
acura_2015 <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
pull(model)
pull(model)
best_acura_2015 <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
pull(model)
best_acura_2015
temp_vars_best_model <- function() {
acura_2015 <- filter(vehicles, make == "Acura", year == 2015)
best_acura <- filter(acura_2015, hwy == max(hwy))
model <- pull(best_acura, model)
}
nested_best_model <- function() {
model <- pull(filter(filter(vehicles,
make == "Acura",
year == 2015
),
hwy == max(hwy)
),
model
)
}
pipe_best_model <- function() {
best_acura_2015 <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
pull(model)
}
system.time(for (i in 1:9999) temp_vars_best_model())
system.time(for (i in 1:9999) nested_best_model())
system.time(for (i in 1:9999) pipe_best_model())
system.time
system.time(for (i in 1:100) temp_vars_best_model())
system.time(for (i in 1:100) nested_best_model())
system.time(for (i in 1:100) pipe_best_model())
system.time(for (i in 1:5000) temp_vars_best_model())
system.time(for (i in 1:5000) nested_best_model())
system.time(for (i in 1:5000) pipe_best_model())
library("nycflights13")
library("dplyr")
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay)
arr_delay_by_month
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay) %>%
head(arr_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay) %>%
head(arr_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
arr_delay_by_month
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
arr_delay_by_month
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, airport == arr_delay_by_month$dest)
# You can look up these airports in the `airports` data frame!
filter(airports, airport == arr_delay_by_month$dest)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# You can look up these airports in the `airports` data frame!
filter(airports, faa = arr_delay_by_month$dest[1])
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[2])
filter(airports, faa == arr_delay_by_month$dest[1])
filter(airports, faa == arr_delay_by_month$dest[2])
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
summarize(
avg_speed = mean(speed, na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(
avg_speed = mean(speed, na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_delay = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, avg_delay == max(avg_delay)) %>%
pull(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
filter(airports, faa == arr_delay_by_month$dest[2])
# Which city was flown to with the highest average speed?
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(
avg_speed = mean(speed, na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
)
largerst_arrival_delay
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(faa = dest)
largerst_arrival_delay
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(faa = dest) %>%
left_join(airports)
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(faa = dest) %>%
left_join(airports)
largerst_arrival_delay
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
#mutate(faa = dest) %>%
left_join(airports)
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(faa = dest) %>%
left_join(airports)
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa")
largerst_arrival_delay
largerst_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largerst_arrival_delay
smallest_arrival_delay <- flights %>%
group_by(carrier) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
mutate(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_arrival_delay
smallest_arrival_delay <- flights %>%
group_by(carrier) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_arrival_delay <- flights %>%
group_by(carrier) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_arrival_delay <- flights %>%
group_by(carrier) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_arrival_delay
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
# reading the dataset
traffic_collision <- read.csv("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project/data/Collisions.csv", stringsAsFactors = FALSE)
# reading the dataset
traffic_collision <- read.csv("data/Collisions.csv", stringsAsFactors = FALSE)
# reading the dataset
traffic_collision <- read.csv("data/Collisions.csv", stringsAsFactors = FALSE)
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
draw_map <- function(dataframe = lat_long_column) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map
View(draw_map)
map
draw_map <- function(dataframe = lat_long_column) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map
draw_map <- function(dataframe) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map(lat_long_column)
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
draw_map <- function(dataframe) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map(lat_long_column)
# reading the dataset
traffic_collision <- read.csv("data/Collisions.csv", stringsAsFactors = FALSE)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
lat_long_column <- traffic_collision %>%
filter(substring(INCDATE, 1, 4) == "2017") %>%
mutate_geocode(LOCATION)
setwd("C:/Users/MSI-NB/Desktop/INFO201/demoMap")
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
collision_WA <- leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
collision_WA <- leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
collision_WA <- leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
draw_map <- function(dataframe) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map(lat_long_column)
collision_WA <- leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
collision_WA <- leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
setwd("C:/Users/MSI-NB/Desktop/INFO201/AB-3-Group-Project")
collision_WA <- leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
draw_map <- function(dataframe) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map(lat_long_column)
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
draw_map <- function(dataframe) {
map <- leaflet(data = dataframe) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
return(map)
}
draw_map(lat_long_column)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(data = lat_long_column) %>%
# addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
# setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(data = lat_long_column) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
