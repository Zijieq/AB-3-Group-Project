traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collision) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
return(fig)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collision) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
return(fig)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collisions) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(traffic_collisions) {
fig <- plot_ly(
x = WEATHER,
y = n(),
name = "Type of Weather vs. Number of Collisions",
type = "bar"
)
fig
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
traffic_collision <- read.csv("data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = ROADCOND)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = n())) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = COLLISIONTYPE)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
plot <- ggplot(data = dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER))
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
select(WEATHER) %>%
filter(!is.na(""))
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
select(WEATHER, SEVERITYDESC) %>%
filter(!is.na(""))
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Number of Collisions", y = "Weather Type",
title = "Number of Collisions ") +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Number of Collisions",
title = "Number of Collisions vs. Weather Type ") +
coord_flip()
return(plot)
}
draw_bar_plot(traffic_collision)
setwd("~/Documents/INFO 201/AB-3-Group-Project")
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "{}")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Number of Collisions",
title = "Number of Collisions vs. Weather Type ") +
coord_flip()
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
# drawing a map with following function
draw_map <- function(dataframe) {
map <- leaflet(dataframe) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10)) %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions(),
popup = ~paste(sep = "<br/>",
"Location: ", LOCATION,
" Injured: ", INJURIES)
)
return(map)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(
title = "The percent distribution of address type in collisions 2017"
)
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and # of collisions.
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(!is.na(WEATHER) | WEATHER != "")
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Number of Collisions",
title = "Number of Collisions vs. Weather Type ") +
coord_flip()
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and type of collisions.
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(WEATHER != "") %>%
unique()
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Count",
title = "Number of Collisions vs. Weather Type") +
coord_flip()
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
# drawing a map with following function
draw_map <- function(dataframe) {
map <- leaflet(dataframe) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10)) %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions(),
popup = ~paste(sep = "<br/>",
"Location: ", LOCATION,
" Injured: ", INJURIES)
)
return(map)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(
title = "Percent Distribution of Address Type in Collisions 2017"
)
return(plot)
}
rm(list = ls())
library(lintr)
library(dplyr)
library(scales)
traffic_collision <- read.csv("./data/lat_long.csv", stringsAsFactors=FALSE, fileEncoding="latin1")
get_summary_info <- function(dataset) {
library(stringr)
ret <- list()
ret$length <- length(dataset)
average_n_involved <- traffic_collision %>%
summarise(involved = mean(PERSONCOUNT,na.rm = TRUE)) %>%
pull(involved)
ret$average_n_involved <- average_n_involved
average_survival_rate <-  traffic_collision%>%
filter(PERSONCOUNT!=0) %>%
summarise(survival_rate = percent(mean((PERSONCOUNT-FATALITIES)/PERSONCOUNT,na.rm = TRUE),
accuracy = 0.01)) %>%
pull(survival_rate)
ret$average_survival_rate <- average_survival_rate
weather_most_collision <- traffic_collision %>%
group_by(WEATHER) %>%
summarise(n_collision=n()) %>%
filter(n_collision==max(n_collision,na.rm = TRUE)) %>%
pull(WEATHER)
ret$weather_most_collision <- weather_most_collision
weather_fatal <- dataset %>%
group_by(WEATHER) %>%
summarise(n_fatalities = sum(FATALITIES,na.rm = TRUE)) %>%
filter(n_fatalities == max(n_fatalities,na.rm = TRUE)) %>%
pull(WEATHER)
ret$weather_fatal <- weather_fatal
rate_injuries_speeding <-  dataset%>%
filter(SPEEDING=="Y") %>%
filter(PERSONCOUNT!=0) %>%
summarise(average_injury_rate=percent(mean(INJURIES/PERSONCOUNT,na.rm = TRUE),
accuracy = 0.01)) %>%
pull(average_injury_rate)
ret$injuries_speeding <- rate_injuries_speeding
return (ret)
}
get_summary_info(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
# Create table for summary data, grouped by collision types.
summary_table <- function(dataframe) {
grouped_dataframe <- dataframe %>%
filter(COLLISIONTYPE != "") %>%
unique() %>%
group_by(COLLISIONTYPE) %>%
summarise(
total_num_injuries = sum(INJURIES),
total_num_serious_injuries = sum(SERIOUSINJURIES),
total_num_fatalities = sum(FATALITIES),
avg_num_indv_involved = mean(PERSONCOUNT, na.rm = TRUE),
avg_num_vehicles = mean(VEHCOUNT, na.rm = TRUE)
) %>%
arrange(-total_num_injuries) %>%
head(10)
}
summary_table(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
# Draw the pie chart with following function.
draw_pie_chart <- function(dataframe) {
aggregate_address_type <- dataframe %>%
group_by(ADDRTYPE) %>%
summarize(appearance = n())
plot <- plot_ly(aggregate_address_type, labels = ~ADDRTYPE,
values = ~appearance,
type = "pie")
plot <- plot %>%
layout(
title = "Percent Distribution of Address Type in Collisions 2017"
)
return(plot)
}
library("dplyr")
library("ggplot2")
library("plotly")
library("ggmap")
library("ggplot2")
library("ggalt")
library("leaflet")
# drawing a map with following function
draw_map <- function(dataframe) {
map <- leaflet(dataframe) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10)) %>%
setView(lat = 47.6, lng = -122.3, zoom = 10) %>%
addMarkers(
clusterOptions = markerClusterOptions(),
popup = ~paste(sep = "<br/>",
"Location: ", LOCATION,
" Injured: ", INJURIES)
)
return(map)
}
library("dplyr")
library("ggplot2")
library("plotly")
# Creating bar plot to see relationship between weather and type of collisions.
draw_bar_plot <- function(dataframe) {
filter_dataframe <- dataframe %>%
filter(WEATHER != "") %>%
unique()
plot <- ggplot(data = filter_dataframe) +
geom_bar(mapping = aes(x = WEATHER, fill = SEVERITYDESC)) +
labs(x = "Weather Type", y = "Count",
title = "Number of Collisions vs. Weather Type") +
coord_flip()
return(plot)
}
setwd("~/Documents/INFO 201/AB-3-Group-Project")
library("dplyr")
library("ggplot2")
library("plotly")
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
# Create table for summary data, grouped by collision types.
summary_table <- function(dataframe) {
grouped_dataframe <- dataframe %>%
filter(COLLISIONTYPE != "") %>%
unique() %>%
group_by(COLLISIONTYPE) %>%
summarise(
total_num_injuries = sum(INJURIES),
total_num_serious_injuries = sum(SERIOUSINJURIES),
total_num_fatalities = sum(FATALITIES),
avg_num_indv_involved = mean(PERSONCOUNT, na.rm = TRUE),
avg_num_vehicles = mean(VEHCOUNT, na.rm = TRUE)
) %>%
arrange(-total_num_injuries) %>%
head(10)
return(summary_table)
}
summary_table(traffic_collision)
library("dplyr")
library("ggplot2")
library("plotly")
traffic_collision <- read.csv("../data/lat_long.csv", stringsAsFactors = FALSE, fileEncoding="latin1")
# Create table for summary data, grouped by collision types.
summary_table <- function(dataframe) {
grouped_dataframe <- dataframe %>%
filter(COLLISIONTYPE != "") %>%
unique() %>%
group_by(COLLISIONTYPE) %>%
summarise(
total_num_injuries = sum(INJURIES),
total_num_serious_injuries = sum(SERIOUSINJURIES),
total_num_fatalities = sum(FATALITIES),
avg_num_indv_involved = mean(PERSONCOUNT, na.rm = TRUE),
avg_num_vehicles = mean(VEHCOUNT, na.rm = TRUE)
) %>%
arrange(-total_num_injuries) %>%
head(10)
return(summary_table)
}
summary_table(traffic_collision)
traffic_collision(summary_table)
summary_table(traffic_collision)
